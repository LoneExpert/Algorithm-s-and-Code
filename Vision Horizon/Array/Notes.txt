Some important things to do operations in arrays -:

1. For Rotation the arrays 
    - An array that was originally sorted but rotated once at some pivot. which means the rotation is only one at ta time and if it increaes from one it will return false -> some question are listed below-:
    1. https://leetcode.com/problems/check-if-array-is-sorted-and-rotated/
    - When multiple rotations are allowed, you're essentially asking: 
    "Is this array a permutation of a sorted array?"
    -> Some question are listed below-:
    2. https://leetcode.com/problems/rotate-function

üîπ Example Topics & Problems

String Manipulation

Remove All Adjacent Duplicates in String
Implement strStr()
Stack-Based Problems

Valid Parentheses
Decode String
Sliding Window (Efficient for substrings, intervals)

Longest Substring Without Repeating Characters
Minimum Window Substring

-----------------------------------------------------------------------------------------------------
** Very important
-----------------------------------------------------------------------------------------------------
Understanding npos in C++ Strings
npos is a constant defined in the std::string class. It represents "no position" or "not found" when using string search functions like find().

üîπ What is npos?
It is a special value that indicates failure in finding a substring or character.
Defined as:
cpp
Copy
Edit
static const size_t npos = -1;
Since size_t is unsigned, npos is the largest possible value of size_t.
üîπ When is npos used?
1Ô∏è‚É£ Checking if find() fails
2Ô∏è‚É£ Ensuring a string operation is valid

üîπ Example 1: Checking if a Substring Exists
cpp
Copy
Edit
#include <iostream>
using namespace std;

int main() {
    string s = "hello world";
    
    // Searching for a substring
    size_t pos = s.find("world");

    if (pos != string::npos) {  
        cout << "Found at index: " << pos << endl; // Output: Found at index: 6
    } else {
        cout << "Not found!" << endl;
    }

    return 0;
}
‚úîÔ∏è Explanation:

find("world") returns 6 because "world" starts at index 6.
If "world" wasn't found, it would return string::npos.
üîπ Example 2: Handling Not Found Cases
cpp
Copy
Edit
string s = "hello";
if (s.find("xyz") == string::npos) {
    cout << "Substring not found!" << endl;
}
‚úî Output:

nginx
Copy
Edit
Substring not found!
üí° Since "xyz" is not in "hello", find() returns string::npos.

üîπ Example 3: Removing All Occurrences of a Substring
cpp
Copy
Edit
#include <iostream>
using namespace std;

int main() {
    string s = "abcxyzabc";
    string part = "abc";

    while (s.find(part) != string::npos) {  // While "abc" is still found
        s.erase(s.find(part), part.length());
    }

    cout << "Final string: " << s << endl;  // Output: "xyz"
    return 0;
}
‚úî Explanation:

The loop keeps removing "abc" until find(part) returns npos.
üîπ Example 4: Using npos for Edge Cases
cpp
Copy
Edit
#include <iostream>
using namespace std;

int main() {
    string s = "apple";

    // Using `npos` for checking valid index
    if (s.find('p') != string::npos) {
        cout << "Character found!" << endl;
    }

    // Trying to access npos directly (not valid)
    cout << s[npos] << endl;  // Undefined behavior (npos is too large!)

    return 0;
}
üö® Warning:
Never use s[npos] because npos is a huge number and can cause undefined behavior.

üîπ Summary
‚úî string::npos is returned when find() fails.
‚úî It is a large size_t value, often -1 in unsigned form.
‚úî Used for checking string searches and preventing errors.
‚úî Used in loops for removing multiple occurrences.

üí° Keep practicing! Try replacing npos with -1 and see what happens! üöÄüî•